{"version":3,"sources":["logo.jpg","components/Navbar.js","components/About.js","components/Projects.js","components/Contact.js","components/Academics.js","components/Cv.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","react_router_dom","to","About","state","posts","_this2","this","axios","get","then","res","setState","data","slice","postList","length","map","post","key","id","src","logo","alt","title","body","Component","Projects","Contact","Academics","Cv","Post","props","match","params","post_id","App","components_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9392177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f7c52692.jpg\";","import React from 'react';\r\nimport {Link,NavLink} from 'react-router-dom';\r\nimport 'tachyons';\r\n\r\nconst Navbar=()=>{\r\n\treturn(\r\n\t\t<nav className=\"dt w-100 border-box pa0 bg-black ph5-ns\">\r\n\t\t  <p className=\"dtc v-mid baskerville link w-25 light-green tl \" >\r\n\t\t    <h1>Harsh Joshi </h1>\r\n\t\t  </p>\r\n\t\t  <div className=\"dtc b v-mid tracked w-75 tr\">\r\n\t\t    <Link to=\"/\" className=\"link ba white pa2 ph3 b--light-green bw1  br3 dim  grow f6 f5-ns dib mr3 mr4-ns\" >ABOUT</Link>\r\n\t\t    <Link to=\"/academics\" className=\"link ba white pa2 ph3 br3 b--light-green bw1  dim  grow f6 f5-ns dib mr3 mr4-ns\" >ACADEMICS</Link>\r\n\t\t    <NavLink to=\"/projects\" className=\"link ba white pa2 ph3 br3 b--light-green bw1  dim  grow f6 f5-ns dib mr3 mr4-ns\" >PROJECTS</NavLink>\r\n\t\t    <Link to=\"/cv\" className=\"link ba white pa2 ph3 br3 b--light-green bw1  dim  grow f6 f5-ns dib mr3 mr4-ns\" >CV</Link>\r\n\t\t    <Link to=\"/contact\" className=\"link ba white pa2 ph3 br3 b--light-green bw1  dim  grow f6 f5-ns dib\" >CONTACT</Link>\r\n\t\t  </div>\r\n\t\t</nav>\r\n\t\t)\r\n}\r\n\r\nexport default Navbar;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport 'tachyons'\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../logo.jpg';\r\n\r\nclass About extends Component{\r\n\tstate={\r\n\t\tposts:[]\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts')\r\n\t\t.then(res=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tposts: res.data.slice(0,10)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\tconst {posts}=this.state;\r\n\tconst postList=posts.length ?(\r\n\tposts.map(post=>{\r\n\t\treturn(\r\n\t\t\t<article  className=\"center mw5 mw6-ns hidden ba b--green bw2 mv4\" key={post.id}>\r\n\t\t\t\t  <img src={logo} alt=\"A logo\" />\r\n\t\t\t\t  <Link to={'/'+post.id}>\r\n\t\t\t\t  <h1 className=\"f4 bg-gray white mv0 pv2 ph3\">{post.title}</h1>\r\n\t\t\t\t  </Link>\r\n\t\t\t\t  <div className=\"pa3 bt\">\r\n\t\t\t\t    <p className=\"f6 f5-ns lh-copy yellow measure mv0\">\r\n\t\t\t\t    \t{post.body}\r\n\t\t\t\t    </p>\r\n\t\t\t\t  </div>\r\n\t\t\t</article>\r\n\t\t\t)\r\n\r\n\t})\r\n)\t:\r\n\t(\r\n\t\t<div className=\"tc f3 white\">Check internet connection </div>\r\n\t\t)\r\n\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"tc white f2\">About</h4>\r\n\t\t\t{postList}\r\n\t\t</div>\r\n\t\t)\t\r\n\t}\r\n}\r\nexport default About;","import React  from 'react';\r\nimport 'tachyons'\r\n\r\nconst Projects=()=>{\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"f2 white\">Projects </h4>\r\n\t\t\t<p className=\"f3 yellow\"> Work on projects is in progress.... </p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\n\r\nexport default Projects;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Contact=()=>{\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"f2 white\">Contact </h4>\r\n\t\t\t<p className=\"f3 yellow\"> Work on contact is in progress.... </p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\n\r\nexport default Contact;","import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst Academics=()=>{\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"white f2\">Academics </h4>\r\n\t\t\t<p className=\"yellow f3\"> Work on academics is in progress... </p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\n\r\nexport default Academics;","import React from 'react';\r\nimport 'tachyons' \r\n\r\nconst Cv=()=>{\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"f2 white\">Cv </h4>\r\n\t\t\t<p className=\"f3 yellow\"> Work on cv is in progress...</p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\n\r\nexport default Cv;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport 'tachyons';\r\nclass Post extends Component{\r\n\tstate={\r\n\t\tpost:null\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tlet id=this.props.match.params.post_id;\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts/'+id)\r\n\t\t.then(res=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tpost:res.data\t\r\n\t\t\t})\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\tconst post=this.state.post?(\r\n\t\t\t<div className=\"post f4\">\r\n\t\t\t\t<h4 className=\"f2 b white\">{this.state.post.title}</h4>\r\n\t\t\t\t<p className=\"yellow\">{this.state.post.body}</p>\r\n\t\t\t</div>\r\n\t\t):(\r\n\t\t\t<div className=\"tc f3 white\">Loading post ....</div>\r\n\r\n\t\t\t)\r\n\t\treturn(\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h4>{post}</h4>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default Post;","import React,{Component} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\nimport About from './components/About';\nimport Projects from './components/Projects';\nimport Contact from './components/Contact';\nimport Academics from './components/Academics';\nimport Cv from './components/Cv';\nimport Post from './components/Post';\n\nclass App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n          <Navbar />\n          <Switch>\n          <Route exact path=\"/\" component={About} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/cv\" component={Cv} />\n          <Route path=\"/academics\" component={Academics} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n      </div>\n      </BrowserRouter>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}